(define atom?
  (lambda (s)
    (or (boolean? s)
        (symbol? s)
        (char? s)
        (procedure? s)
        (number? s)
        (port? s)
        (null? s))))

(define lat?
  (lambda (l)
    (cond ((null? l) #t)
          ((atom? (car l)) (lat? (cdr l)))
          (else #f))))

(define member?
  (lambda (a lat)
    (cond ((null? lat) #f)
        (else (or (eq? (car lat) a)
                  (member? a (cdr lat)))))))

(define rember
  (lambda (a lat)
    (cond ((null? lat) '())
          ((eq? (car lat) a) (cdr lat))
          (else (cons (car lat) (rember a (cdr lat)))))))

(define firsts
  (lambda (lat)
    (cond ((null? lat) '())
          (else (cons (car (car lat)) (firsts (cdr lat)))))))

(define insertR
  (lambda (new old lat)
    (cond ((null? lat) '())
          ((eq? (car lat) old) (cons old (cons new (cdr lat))))
          (else (cons (car lat) (insertR new old (cdr lat)))))))

(define insertL
  (lambda (new old lat)
    (cond ((null? lat) '())
          ((eq? (car lat) old) (cons new lat))
          (else (cons (car lat) (insertL new old (cdr lat)))))))

(define substr
  (lambda (new old lat)
    (cond ((null? lat) '())
          ((eq? (car lat) old) (cons new (cdr lat)))
          (else (cons (car lat) (substr new old (cdr lat)))))))

(define substr2
  (lambda (new o1 o2 lat)
    (cond ((null? lat) '())
          ((or (eq? (car lat) o1) (eq? (car lat) o2)) (cons new (cdr lat))) 
          (else (cons (car lat) (substr2 new o1 o2 (cdr lat)))))))

(define multirember
  (lambda (a lat)
    (cond ((null? lat) '())
          ((eq? (car lat) a) (multirember a (cdr lat)))
          (else (cons (car lat) (multirember a (cdr lat)))))))

(define multiinsertR
  (lambda (new old lat)
    (cond ((null? lat) '())
          ((eq? (car lat) old)
           (cons old
                 (cons new
                       (multiinsertR new old (cdr lat)))))
          (else
           (cons (car lat)
                 (multiinsertR new old (cdr lat)))))))

(define multiinsertL
  (lambda (new old lat)
    (cond ((null? lat) '())
          ((eq? (car lat) old)
           (cons new (cons old
                           (multiinsertL new old (cdr lat)))))
          (else
           (cons (car lat)
                 (multiinsertL new old (cdr lat)))))))


(define multisubstr
  (lambda (new old lat)
    (cond ((null? lat) '())
          ((eq? (car lat) old) (cons new (multisubstr new old (cdr lat))))
          (else (cons (car lat)
                      (multisubstr new old (cdr lat)))))))

(define zero?
  (lambda (n)
    (= n  0)))

(define add1
  (lambda (n)
    (+ 1 n)))

(define sub1
  (lambda (n)
    (- n 1)))
(define myadd
  (lambda (n m)
    (cond ((zero? m) n)
          (else (add1 (myadd n (sub1 m))) ))))

(define mysub
  (lambda (n m)
    (cond ((zero? m) n)
          (else (sub1 (mysub n (sub1 m)))))))

(define addtup
  (lambda (tup)
    (cond ((null? tup) 0)
          (else (myadd (car tup) (addtup (cdr tup)))))))

(define mymulti
  (lambda (n m)
    (cond ((zero? m) 0)
          (else (myadd n (mymulti n (sub1 m)))))))

(define tup+
  (lambda (tup1 tup2)
    (cond ((and (null? tup1) (null? tup2))
           '())
          ((null? tup1) tup2)
          ((null? tup2) tup1)
          (else (cons (myadd (car tup1)
                             (car tup2))
                      (tup+ (cdr tup1)
                            (cdr tup2)))))))

(define myg
  (lambda (n m)
    (cond ((zero? n) #f)
          ((zero? m) #t)
          (else (myg (sub1 n) (sub1 m))))))

(define myl
  (lambda (n m)
    (cond ((zero? m) #f)
          ((zero? n) #t)
          (else (myl (sub1 n) (sub1 m))))))

(define myeq
  (lambda (n m)
    (cond ((zero? m) (zero? n))
          ((zero? n) #f)
          (else (myeq (sub1 n) (sub1 m))))))

(define myexp
  (lambda (n m)
    (cond ((zero? m) 1)
          (else (mymulti n (myexp n (sub1 m)))))))

(define mydiv
  (lambda (n m)
    (cond ((< n m) 0)
          (else (add1 (mydiv (- n m) m))))))

(define length
  (lambda (lat)
    (cond ((null? lat) 0)
          (else (add1 (length (cdr lat))) ))))

(define pick
  (lambda (n lat)
    (cond ((zero? (sub1 n)) (car lat))
          (else (pick (sub1 n) (cdr lat))))))

(define rempick
  (lambda (n lat)
    (cond ((zero? (sub1 n) )(cdr lat))
          (else (cons (car lat) (rempick (sub1 n) (cdr lat)))))))

(define occur
  (lambda (target lat)
    (cond ((null? lat) 0)
          ((eq? target (car lat))
           (add1 (occur target (cdr lat))))
          (else (occur target (cdr lat))))))

(define rember*
  (lambda (a lat)
    (cond ((null? lat) '())
          ((atom? (car lat))
           (cond ((eq? (car lat) a)
                  (rember* a (cdr lat)))
                 (else (cons (car lat)
                             (rember*  a (cdr lat)))))
           )
          (else (cons (rember* a (car lat)) (rember* a (cdr lat)))))))

(define insertR*
  (lambda (new old l)
    (cond ((null? l) '())
          ((atom? (car l))
           (cond ((eq? (car l) old)
                  (cons old
                        (cons new (cdr l))))
                 (else (cons (car l)
                             (insertR* new old (cdr l)))))
           )
          (else (cons (insertR* new old (car l))
                       (insertR* new old (cdr l)))))))

(define occur*
  (lambda (a l)
    (cond ((null? l) 0)
          ((atom? (car l))
           (cond ((eq? a (car l))
                  (add1 (occur* a (cdr l))))
                 (else (occur* a (cdr l)))))
          (else (myadd (occur* a (car l))
                       (occur* a (cdr l)))))))

(define subst*
  (lambda (new old l)
    (cond ((null? l) '())
          ((atom? (car l))
           (cond
            ((eq? (car l) old)
             (cons new (subst* new old (cdr l))))
            (else (cons (car l) (subst* new old (cdr l))))))
          (else (cons (subst* new old (car l))
                      (subst* new old (cdr l)))))))

(define equal?
  (lambda (l1 l2)
    (cond ((and (atom? l1) (atom? l2))
           (eqan? l1 l2))
          ((or (atom? l1) (atom? l2)) #f ) 
          (else (eqlist? l1 l2)))))

(define member*
  (lambda (a l)
    (cond ((null? l) #f)
          ((atom? (car l))
           (or (equal? (car l) a)
               (member* a (cdr l))))
          (else (or (member* a (car l))
                    (member* a (cdr l)))))))

(define leftmost
  (lambda (l)
    (cond ((null? l) '())
          ((atom? (car l))
           (car l))
          (else (leftmost (car l))))))

(define eqan?
  (lambda (t1 t2)
    (eq? t1 t2)))

(define eqlist?
  (lambda (l1 l2)
    (cond ((and (null? l1) (null2 l2)) #t)
          ((or (null? l1) (null? l2)) #f)
          ((and (atom? (car l1))
                (atom? (car l2)))
           (and (eqan? (car l1) (car l2))
                (eqlist? (cdr l1) (cdr l2))))
          ((or (atom? (car l1))
               (atom? (car l2))) #f)
          (else
           (and (eqlist? (car l1) (car l2))
                (eqlist? (cdr l1) (cdr l2)))))))

(define numbered?
  (lambda (exp)
    (cond ((atom? exp) (number? exp))
          (else
           (and (numbered? (car exp))
                (numbered? (car (cdr (cdr exp)))))))))

(define value
  (lambda (nexp)
    (cond ((atom? nexp) nexp)
          ((eq? (car (cdr nexp)) '+)
           (myadd (value (car nexp))
                  (value (car (cdr (cdr nexp))))))
          ((eq? (car (cdr nexp)) '*)
           (mymulti (value (car nexp))
                    (value (car (cdr (cdr nexp))))))
          (else
           (myexp (value (car nexp))
                  (value (car (cdr (cdr nexp)))))))))

(define set?
  (lambda (lat)
    (cond ((null? lat) #t)
          ((member? (car lat) (cdr lat)) #f)
          (else (set? (cdr lat))))))

(define makeset?
  (lambda (lat)
    (cond ((null? lat) '())
          ((member? (car lat) (cdr lat))
           (makeset? (cdr lat)))
          (else (cons (car lat) (makeset? (cdr lat)))))))

(define makesetnew?
  (lambda (lat)
    (cond ((null? lat) '())
          (else (cons (car lat)
                      (makesetnew? (multirember (car lat)
                                                (cdr lat))))))))

(define subset?
  (lambda (set1 set2)
    (cond ((null? set1) #t)
          (else (and (member? (car set1) set2)
                     (subset? (cdr set1) set2))))
   ))

(define eqset?
  (lambda (set1 set2)
    (cond
     ((subset? set1 set2)
      (subset? set2 set1))
     (else #f))))

(define intersect?
  (lambda (set1 set2)
    (cond ((null? set1) #f)
          (else (or (member? (car set1) set2)
                    (intersect? (cdr set1) set2))))))

(define intersect
  (lambda (set1 set2)
    (cond ((null? set1) '())
          ((member? (car set1) set2)
           (cons (car set1) (intersect (cdr set1) set2)))
          (else
           (intersect (cdr set1) set2)))))

(define union
  (lambda (set1 set2)
    (cond ((null? set1) set2)
          ((member? (car set1) set2)
           (union (cdr set1) set2))
          (else
           (cons (car set1) (union (cdr set1) set2))))))

(define intersectall
  (lambda (l-set)
    (cond ((null? (cdr l-set)) (car l-set))
          (else (intersect (car l-set)
                           (intersectall (cdr l-set)))))))

(define a-pair?
  (lambda (x)
    (cond ((atom? x) #f)
          ((null? x) #f)
          ((null? (cdr x)) #f)
          ((null? (cdr (cdr x))) x)
          (else #f))))

(define fun?
  (lambda (rel)
    (set? (firsts rel))))

(define rember-f
  (lambda (test? a l)
    (cond ((null? l) '())
          (else (cond ((test? (car l) a)
                       (cdr l))
                      (else (cons (car l)
                                  (rember-f test? a
                                            (cdr l)))))))))

(define eq-c?
  (lambda (a)
    (lambda (x)
      (eq? a x))))
(define rember-f
  (lambda (test?)
    (lambda (a l)
      (cond ((null? l) '())
            ((test? (car l) a)
             (cdr l))
            (else (cons (car l)
                        ((rember-f test?) a (cdr l))))))))

(define insertL-f
  (lambda (test?)
    (lambda (new old l)
      (cond ((null? l) '())
            ((test? (car l) old)
             (cons new (cons old (cdr l))))
            (else (cons (car l)
                        ((insertL-f test?) new old
                         (cdr l))))))))

(define insertR-f
  (lambda (test?)
    (lambda (new old l)
      (cond ((null? l) '())
            ((test? (car l) old)
             (cons old (cons new (cdr l))))
            (else (cons (car l)
                        ((insertL-f test?) new old
                         (cdr l))))))))

(define insert-g
  (lambda (seq)
    (lambda (new old l)
      (cond ((null? l) '())
            ((eq? (car l) old)
             (seq new old (cdr l)))
            (else (cons (car l) ((insert-g seq) new old
                   (cdr l)))
                  )))))

(define seqL
  (lambda (new old l)
    (cons new (cons old l))))

(define atom-to-function
  (lambda (x)
    (cond ((eq? x '+) +)
          ((eq? x '*) *)
          ((eq? x 'exp) myexp))))

(define value
  (lambda (nexp)
    (cond ((atom? nexp) nexp)
          (else ((atom-to-function (midoperator nexp))
                 (value (1st-sub-exp nexp))
                 (value (3rd-sub-exp nexp)))))))

(define mid-value
  (lambda (nexp)
    (cond ((atom? nexp) nexp)
          (else ((atom-to-function (midoperator nexp))
                 (value (mid-1st-sub-exp nexp))
                 (value (mid-2nd-sub-exp nexp)))))))

(define operator
  (lambda (nexp)
    (car nexp)))

(define midoperator
  (lambda (nexp)
    (car (cdr nexp))))

(define mid-1st-sub-exp
  (lambda (nexp)
    (car nexp)))

(define mid-2nd-sub-exp
  (lambda (nexp)
    (car (cdr (cdr nexp)))))

(define 1st-sub-exp
  (lambda (nexp)
    (car (cdr nexp))))
(define 2nd-sub-exp
  (lambda (nexp)
    (car (cdr (cdr nexp)))))
(define 3rd-sub-exp
  (lambda (nexp)
    (car (cdr (cdr (cdr nexp))))))

(define multirember-col
  (lambda (a lat col)
    (cond ((null? lat)
           (col (quote ()) (quote ())))
          ((eq? (car lat) a)
           (multirember-col a
                            (cdr lat)
                            (lambda (newlat seen)
                              (col newlat
                                   (cons (car lat)
                                         seen)))))
          (else
           (multirember-col a
                            (cdr lat)
                            (lambda (newlat seen)
                              (col (cons (car lat) newlat)
                                   seen)))))))

(define printlst
  (lambda (lst)
    (cond ((null? lst) (format #f "~%"))
          ((atom? lst) (format #f "")))))

(define a-friend
  (lambda (x y)
    (null? y)))

(define last-friend
  (lambda (x y)
    (length x)))

(define even?
  (lambda (n)
    (= (mymulti (mydiv n 2) 2) n)
   ))

(define evens-only-co
  (lambda (l col)
    (cond ((null? l)
           (col (quote ()) 1 0))
          ((atom? (car l))
           (cond ((even? (car l))
                  (evens-only-co (cdr l)
                                 (lambda (newl p s)
                                   (col (cons (car l) newl)
                                        (* (car l) p) s))))
                 (else (evens-only-co (cdr l)
                                      (lambda (newl p s)
                                        (col newl p
                                             (+ (car l) s))))
                       )))
          (else (evens-only-co (car l)
                               (lambda (al ap as)
                                 (evens-only-co (cdr l)
                                                (lambda (dl dp ds)
                                                  (col (cons al dl)
                                                       (* ap dp)
                                                       (+ as ds))))))))))

(define the-last-friend
  (lambda (newl product sum)
    (cons sum
          (cons product newl))))

(define evens-flat
  (lambda (l col)
    (cond ((null? l)
           (col '() 1 0))
          (else
           (cond ((even? (car l))
                  (evens-flat (cdr l)
                              (lambda (newl p s)
                                (col (cons (car l) newl)
                                     (* (car l) p)
                                     s))))
                 (else (evens-flat (cdr l)
                                   (lambda (newl p s)
                                     (col (cons (car l) newl)
                                          p
                                          (+ (car l) s))))))))))

(define keep-looking
  (lambda ( a sorn lat)
    (cond ((number? sorn)
           (keep-looking a (pick sorn lat) lat))
          (else (eq? sorn a))) ))

(define first
  (lambda (p)
    (car p)))

(define second
  (lambda (p)
    (car (cdr p))))

(define build
  (lambda (s1 s2)
    (cons s1 (cons s2 '()))))

(define shift
  (lambda (pair)
    (build (first (first pair))
           (build (second (first pair))
                  (second pair)))))

