require 'rubygems'
require 'eventmachine'

class SimpleChatServer < EM::Connection

    @@connected_clients = Array.new

    attr_reader :username
    
    def post_init
        @username = nil
        puts "A client has connected"
        ask_username
    end

    def unbind
        @@connected_clients.delete(self)
        puts "A client has left..."
    end

    def receive_data(data)
        if entered_username?
            handle_chat_message(data.strip)
        else
            handle_username(data.strip)
        end
    end

    def entered_username?
        !@username.nil? && !@username.empty?
    end

    def handle_username(input)
        if input.empty?
            send_line("Blank usernames are not allowed. Try again.")
            ask_username
        else
            @username = input

            @@connected_clients.push(self)
            self.other_peers.each do |c|
                c.send_data("#{c.username}, #{@username} has joined the room\n")
            end

            puts "#{@username} has joined"
            self.send_line("[info] Ohai, #{@username}")
        end
    end

    def ask_username
        self.send_line("[Info] Enter your username: ")
    end

    def handler_chat_message(msg)
        raise NotImplementedError
    end

    
    
    def other_peers
        set = @@connected_clients.reject {|c| self == c}
        
    end

    def send_line(line)
        self.send_data("#{line}\n")
    end
    
    
end

EM.run do
    Signal.trap("INT") {EM.stop}
    Signal.trap("TERM") {EM.stop}
    EM.start_server("127.0.0.1", 8082, SimpleChatServer)
end
